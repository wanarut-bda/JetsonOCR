#  Prerequired
1. VMWare 15
2. Ubuntu 18
3. USB with Data
4. register nvidia developer account

------------------------ Part Host SDK Manager -----------------------
# install Nvidia SDK Manger for install New Jetpack OS with CUDA
1. install Ubuntu 18 only (ubuntu-18.04.6-desktop-amd64.iso) (storage 80GB or more) on VMWare 15 only
   normal or minimal installation & must select option "dowload updates" (or use $sudo apt update)
2. Login & Download SDK from https://developer.nvidia.com/embedded/downloads
3. select Flash Jetpack 4.6.2 OS
4. check Jetson OS
4. do not check Jetson SDK Components before build Opencv 4.5.3 (Part Build OpenCV)
5. select automatic setup + runtime option on 3rd step in SDK Manager
$ssh jetson@<jetson-ip>
password yahboom
----------------------------------------------------------------------
------------------------ Part PIP 3 ----------------------------------
# install pip3 for python 3.6.9
wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
sudo python3 get-pip.py
----------------------------------------------------------------------
------------------------ (Optional) Part Monitoring ------------------
# install monitoring tool
sudo apt -y update
sudo -H pip3 install -U jetson-stats
sudo systemctl restart jetson_stats.service
sudo jtop
----------------------------------------------------------------------
------------------------ Part Build OpenCV ---------------------------
# Before Build OpenCV, jetson nano has 38% disk usage (case do not install Jetson SDK Components)
# build opencv
git clone https://github.com/wanarut-bda/buildOpenCV.git
cd buildOpenCV
sudo ./buildOpenCV.sh |& tee openCV_build.log
# take time about 5 hours

# check build Information
python3
import cv2
print(cv2.getBuildInformation())
# Version control:      4.5.3-dirty
# GStreamer:            YES (1.14.5)
# After Build OpenCV, jetson nano has 51% disk usage
delete opencv & opencv_contrib folder in /home (1.9 GB)
# After Delete opencv folder, jetson nano has 39% disk usage
----------------------------------------------------------------------
------------------------ Part Clear Space ----------------------------
# After install All SDK, jetson nano has 84% disk usage (case install Jetson SDK Components)

# clear for free space
sudo apt remove -y libreoffice* thunderbird*
sudo apt-get -y autoremove
sudo apt-get clean

# reduce disk usage to 80%
----------------------------------------------------------------------
------------------------ Part Jetson Nano SDK ------------------------
4. do not check Jetson OS
4. check Jetson SDK Components after build Opencv 4.5.3 (Part Build OpenCV)
2. select automatic setup + runtime option on 3rd step in SDK Manager

# check cuda version
nvcc -V
----------------------------------------------------------------------
------------------------ Part Install OCR Module ---------------------
# NOTE** if use easyocr do not install paddleocr

# easyocr installation
# install pytorch (native style)
# ref https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048
wget https://nvidia.box.com/shared/static/fjtbno0vpo676a25cgvuqc1wty0fkkg6.whl -O torch-1.10.0-cp36-cp36m-linux_aarch64.whl
sudo apt-get install python3-pip libopenblas-base libopenmpi-dev libomp-dev
sudo -H pip3 install Cython
sudo -H pip3 install numpy torch-1.10.0-cp36-cp36m-linux_aarch64.whl
# take time about 10 minutes
(Optional) sudo -H pip3 install torchvision
(Optional specific version) sudo -H pip3 install torchvision==0.10.0
sudo -H pip3 install easyocr
sudo -H pip3 uninstall opencv-python-headless
# take time about 2 hours

test python3
#run python
python3
import cv2
cv2.__version__
tracker = cv2.TrackerCSRT_create()
print(cv2.getBuildInformation())

# or install pytorch via docker
JetPack 4.6.1 (L4T R32.7.1)
l4t-pytorch:r32.7.1-pth1.9-py3
PyTorch v1.9.0
torchvision v0.10.0
torchaudio v0.9.0
# ref https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-pytorch
sudo docker pull nvcr.io/nvidia/l4t-pytorch:r32.7.1-pth1.10-py3
sudo docker run -it --rm --runtime nvidia --network host nvcr.io/nvidia/l4t-pytorch:r32.7.1-pth1.10-py3
#You should then be able to start a Python3 interpreter and import torch and import torchvision.


# (Optional) install paddleocr
# install dependencies
$ sudo apt-get install cmake wget
$ sudo apt-get install libatlas-base-dev libopenblas-dev libblas-dev
$ sudo apt-get install liblapack-dev patchelf gfortran
$ sudo -H pip3 install Cython
$ sudo -H pip3 install -U python3-setuptools
$ sudo -H pip3 install six requests wheel pyyaml
# upgrade version 3.0.0 -> 3.13.0
$ sudo -H pip3 install -U protobuf
# download the wheel
# $ wget https://paddle-wheel.bj.bcebos.com/2.0.0-rc0-jetson-openblas/paddlepaddle_gpu-2.0.0rc0-cp27-cp27mu-linux_aarch64.whl
$ wget https://paddle-wheel.bj.bcebos.com/kunlun/paddlepaddle-2.0.2-cp37-cp37m-linux_aarch64.whl
# install Paddle
$ sudo -H pip3 install paddlepaddle-2.0.0-cp37-cp37m-linux_aarch64.whl
# clean up
$ rm paddlepaddle-2.0.0-cp37-cp37m-linux_aarch64.whl

----------------------------------------------------------------------
------------------------ (Optional) Part Install VNC -----------------
# (Optional) install vnc
sudo apt update
sudo apt install vino
mkdir -p ~/.config/autostart
cp /usr/share/applications/vino-server.desktop ~/.config/autostart
gsettings set org.gnome.Vino prompt-enabled false
gsettings set org.gnome.Vino require-encryption false
gsettings set org.gnome.Vino authentication-methods "['vnc']"
gsettings set org.gnome.Vino vnc-password $(echo -n 'aabbccddee'|base64)
sudo reboot
----------------------------------------------------------------------
------------------------ (Optional) Part Python 3.9 ------------------
# (Optional) Upgrade to python 3.9
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt-get update
sudo apt-get install python3.9
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2
sudo update-alternatives --config python3
# select number 2
python3 -V
----------------------------------------------------------------------